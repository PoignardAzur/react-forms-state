// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormWatcher gives nested value in watchedValue 1`] = `
Object {
  "calls": Array [
    Array [
      Object {
        "validation": true,
        "value": null,
        "watchedStatePath": "infos.name",
        "watchedValidation": true,
        "watchedValue": null,
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": "infos.name",
      },
    ],
    Array [
      Object {
        "validation": undefined,
        "value": Object {
          "infos": Object {
            "name": "ok",
          },
        },
        "watchedStatePath": "infos.name",
        "watchedValidation": undefined,
        "watchedValue": "ok",
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": "infos.name",
      },
    ],
  ],
  "instances": Array [
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": "infos.name",
    },
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": "infos.name",
    },
  ],
}
`;

exports[`FormWatcher should accept a function as watchPath taking current statePath as parameter 1`] = `
Object {
  "calls": Array [
    Array [
      Object {
        "validation": true,
        "value": null,
        "watchedStatePath": "test.newPath",
        "watchedValidation": true,
        "watchedValue": null,
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": [Function],
      },
    ],
  ],
  "instances": Array [
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": [Function],
    },
  ],
}
`;

exports[`FormWatcher should accept a function as watchPath taking current statePath as parameter 2`] = `
Object {
  "calls": Array [
    Array [
      "test",
    ],
    Array [
      "test",
    ],
  ],
  "instances": Array [
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": [Function],
    },
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": [Function],
    },
  ],
}
`;

exports[`FormWatcher should handle initial change 1`] = `
Object {
  "calls": Array [
    Array [
      Object {
        "validation": true,
        "value": null,
        "watchedStatePath": "infos",
        "watchedValidation": true,
        "watchedValue": null,
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": "infos",
      },
    ],
    Array [
      Object {
        "validation": undefined,
        "value": "salut",
        "watchedStatePath": "infos",
        "watchedValidation": undefined,
        "watchedValue": "salut",
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": "infos",
      },
    ],
  ],
  "instances": Array [
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": "infos",
    },
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": "infos",
    },
  ],
}
`;

exports[`FormWatcher should not update when statePath is "infos.name" and watchPath "name" 1`] = `
Object {
  "calls": Array [
    Array [
      Object {
        "validation": true,
        "value": null,
        "watchedStatePath": "name",
        "watchedValidation": true,
        "watchedValue": null,
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": "name",
      },
    ],
  ],
  "instances": Array [
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": "name",
    },
  ],
}
`;

exports[`FormWatcher should throw if children isn't a function 1`] = `"children of FormWatcher must be a function of type (stateValue, props) => React$element"`;

exports[`FormWatcher should update when statePath is "infos" and watchPath "infos.name" 1`] = `
Object {
  "calls": Array [
    Array [
      Object {
        "validation": true,
        "value": null,
        "watchedStatePath": "infos.name",
        "watchedValidation": true,
        "watchedValue": null,
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": "infos.name",
      },
    ],
    Array [
      Object {
        "validation": undefined,
        "value": "salut",
        "watchedStatePath": "infos.name",
        "watchedValidation": undefined,
        "watchedValue": "salut",
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": "infos.name",
      },
    ],
  ],
  "instances": Array [
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": "infos.name",
    },
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": "infos.name",
    },
  ],
}
`;

exports[`FormWatcher should update when statePath is "infos.name" and watchPath "infos" 1`] = `
Object {
  "calls": Array [
    Array [
      Object {
        "validation": true,
        "value": null,
        "watchedStatePath": "infos",
        "watchedValidation": true,
        "watchedValue": null,
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": "infos",
      },
    ],
    Array [
      Object {
        "validation": undefined,
        "value": "salut",
        "watchedStatePath": "infos",
        "watchedValidation": undefined,
        "watchedValue": "salut",
      },
      Object {
        "__debug": false,
        "children": [Function],
        "watchPath": "infos",
      },
    ],
  ],
  "instances": Array [
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": "infos",
    },
    Object {
      "__debug": false,
      "children": [Function],
      "watchPath": "infos",
    },
  ],
}
`;
